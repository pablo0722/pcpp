/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
const fs = require("fs");
const util = require("util");
const u = require("./pcpp");

let tabs = [];

function verbose (str) {
  //util.inspect.styles ["string"] = "magenta";
  //console.log ("_V " + util.inspect(str, false, null, true));
}
function trace (str) {
  //util.inspect.styles ["string"] = "cyan";
  //console.log ("_T " + util.inspect(str, false, null, true));
}
function debug (str) {
  //util.inspect.styles ["string"] = "blue";
  //console.log ("_D " + util.inspect(str, false, null, true));
}
function info (str) {
  util.inspect.styles ["string"] = "green";
  console.log ("_I " + util.inspect(str, false, null, true));
}

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(project_name, filenames, options) {
  options = options !== void 0 ? options : {};
  if (!project_name)
  {
    info (`usage: parse ('project_name', ['filename_1', 'filename_2'], options)`);
    info (`optional: options = {'startRule' : 'start_rule_function'}`);
    return;
  }

  u.open_project (project_name, filenames);
  filenames = [filenames].flat (Infinity);
  filenames.forEach (filename => {
    peg$parseFile(filename, options);
  });
  u.close_project ();
}

function peg$parseFile(filename, options) {
  options = options !== void 0 ? options : {};

  u.open_file (filename);
  const input = fs.readFileSync (filename, "utf8");

  var peg$FAILED = {},

      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction  = peg$parsestart,

      peg$c0 = function() {u.close_file ();},
      peg$c1 = "//",
      peg$c2 = peg$literalExpectation("//", false),
      peg$c3 = function(fxs) {u.add_effects_on_next_element (fxs);},
      peg$c4 = "[",
      peg$c5 = peg$literalExpectation("[", false),
      peg$c6 = "]",
      peg$c7 = peg$literalExpectation("]", false),
      peg$c8 = function(fx) {return fx;},
      peg$c9 = function() {},
      peg$c10 = /^[A-Z]/,
      peg$c11 = peg$classExpectation([["A", "Z"]], false, false),
      peg$c12 = /^[A-Z0-9\-]/,
      peg$c13 = peg$classExpectation([["A", "Z"], ["0", "9"], "-"], false, false),
      peg$c14 = function(fx) {return u.flat (fx).join("");},
      peg$c15 = peg$otherExpectation("non_effect"),
      peg$c16 = /^[^\n\r]/,
      peg$c17 = peg$classExpectation(["\n", "\r"], true, false),
      peg$c18 = peg$otherExpectation("Class"),
      peg$c19 = "{",
      peg$c20 = peg$literalExpectation("{", false),
      peg$c21 = "}",
      peg$c22 = peg$literalExpectation("}", false),
      peg$c23 = ";",
      peg$c24 = peg$literalExpectation(";", false),
      peg$c25 = function() {u.close_class ();},
      peg$c26 = peg$otherExpectation("class_id"),
      peg$c27 = "class",
      peg$c28 = peg$literalExpectation("class", false),
      peg$c29 = function(id) {u.open_class (id);},
      peg$c30 = peg$otherExpectation("class content"),
      peg$c31 = function(access) {u.set_access (access);},
      peg$c32 = function(member) {},
      peg$c33 = peg$otherExpectation("Access specifier"),
      peg$c34 = "public",
      peg$c35 = peg$literalExpectation("public", false),
      peg$c36 = ":",
      peg$c37 = peg$literalExpectation(":", false),
      peg$c38 = function(access) {return access;},
      peg$c39 = "protected",
      peg$c40 = peg$literalExpectation("protected", false),
      peg$c41 = "private",
      peg$c42 = peg$literalExpectation("private", false),
      peg$c43 = peg$otherExpectation("Class member"),
      peg$c44 = function(m) {},
      peg$c45 = peg$otherExpectation("Class member declaration"),
      peg$c46 = function(m) {u.add_ctor (m);},
      peg$c47 = function(m) {u.add_dtor (m);},
      peg$c48 = function(m) {u.add_method (m);},
      peg$c49 = function(m) {u.add_op_overload (m);},
      peg$c50 = function(m) {u.add_variable (m);},
      peg$c51 = peg$otherExpectation("Class member definition"),
      peg$c52 = peg$otherExpectation("Class Constructor"),
      peg$c53 = "(",
      peg$c54 = peg$literalExpectation("(", false),
      peg$c55 = ")",
      peg$c56 = peg$literalExpectation(")", false),
      peg$c57 = function(args) {ctor = {"effects":[], "args":args??[], "definition":[]}; debug (`Class Constructor: ${JSON.stringify (ctor)}`); return ctor;},
      peg$c58 = peg$otherExpectation("Class Destructor"),
      peg$c59 = "~",
      peg$c60 = peg$literalExpectation("~", false),
      peg$c61 = function(args) {dtor = {"effects":[], "args":args??[], "definition":[]}; debug (`Class Destructor: ${JSON.stringify (dtor)}`); return dtor;},
      peg$c62 = peg$otherExpectation("Class Method"),
      peg$c63 = function(d, id, args) {m = {"effects":[], "return":d, "id":id, "args":args??[], "definition":[]}; debug (`Class Method: ${JSON.stringify (m)}`); return m;},
      peg$c64 = peg$otherExpectation("Class Operator Overload"),
      peg$c65 = "operator",
      peg$c66 = peg$literalExpectation("operator", false),
      peg$c67 = /^[=]/,
      peg$c68 = peg$classExpectation(["="], false, false),
      peg$c69 = function(d, op, args) {ov = {"effects":[], "return":d, "operator":op, "args":args??[], "definition":[]}; debug (`Class Operator Overload: ${JSON.stringify (ov)}`); return ov;},
      peg$c70 = peg$otherExpectation("Variable"),
      peg$c71 = function(d, id) {v = {"effects":[], "datatype":d, "id":id, "definition":[]}; debug (`Variable: ${JSON.stringify (v)}`); return v;},
      peg$c72 = peg$otherExpectation("Declaration"),
      peg$c73 = function() {trace (`Declaration`);},
      peg$c74 = peg$otherExpectation("Definition"),
      peg$c75 = function() {trace (`Definition`);},
      peg$c76 = peg$otherExpectation("Arguments"),
      peg$c77 = function(arg1, args2_to_n) {args = u.flat ([arg1, args2_to_n]); trace (`Arguments: ${JSON.stringify (args)}`); return args;},
      peg$c78 = peg$otherExpectation("Arguments 2 to n"),
      peg$c79 = ",",
      peg$c80 = peg$literalExpectation(",", false),
      peg$c81 = function(arg) {trace (`Arguments 2 to n: ${JSON.stringify (arg)}`); return arg;},
      peg$c82 = peg$otherExpectation("Argument"),
      peg$c83 = function(t, id) {arg = {... t, "id":id}; trace (`Argument: ${JSON.stringify (arg)}`); return arg;},
      peg$c84 = peg$otherExpectation("Data Type"),
      peg$c85 = function(q, d, p) {d = {"qualifiers":q??[], "datatype":d, "postfixes":p}; trace (`Data Type: ${JSON.stringify (d)}`); return d;},
      peg$c86 = peg$otherExpectation("postfix"),
      peg$c87 = /^[&*]/,
      peg$c88 = peg$classExpectation(["&", "*"], false, false),
      peg$c89 = function(p, q) {p = {"postfix":p, "qualifiers":q??[]}; trace (`postfix: ${JSON.stringify (p)}`); return p;},
      peg$c90 = peg$otherExpectation("Qualifiers"),
      peg$c91 = function(qs) {return qs;},
      peg$c92 = "const",
      peg$c93 = peg$literalExpectation("const", false),
      peg$c94 = "volatile",
      peg$c95 = peg$literalExpectation("volatile", false),
      peg$c96 = function(q1, q2) {qs = [q1, q2]; trace (`Qualifiers: ${qs}`); return qs;},
      peg$c97 = function(q) {qs = [q];      trace (`Qualifiers: ${qs}`); return qs;},
      peg$c98 = peg$otherExpectation("Special Qualifier"),
      peg$c99 = "static",
      peg$c100 = peg$literalExpectation("static", false),
      peg$c101 = function(sq) {trace (`Special Qualifier: ${sq}`); return sq;},
      peg$c102 = "mutable",
      peg$c103 = peg$literalExpectation("mutable", false),
      peg$c104 = peg$otherExpectation("cpp"),
      peg$c105 = /^[^"\/\/"]/,
      peg$c106 = peg$classExpectation(["\"", "/", "/", "\""], true, false),
      peg$c107 = function(m) {trace (m);},
      peg$c108 = peg$otherExpectation("id"),
      peg$c109 = /^[A-Za-z_]/,
      peg$c110 = peg$classExpectation([["A", "Z"], ["a", "z"], "_"], false, false),
      peg$c111 = /^[A-Za-z_0-9]/,
      peg$c112 = peg$classExpectation([["A", "Z"], ["a", "z"], "_", ["0", "9"]], false, false),
      peg$c113 = function(id) {id = u.flat (id).join(""); trace (`id: ${id}`); return id;},
      peg$c114 = peg$otherExpectation("separation"),
      peg$c115 = function(m) {return m;},
      peg$c116 = peg$otherExpectation("space"),
      peg$c117 = /^[ \t]/,
      peg$c118 = peg$classExpectation([" ", "\t"], false, false),
      peg$c119 = function(m) {trace (m.length + " space (s)"); return " ";},
      peg$c120 = peg$otherExpectation("new line"),
      peg$c121 = /^[\n\r]/,
      peg$c122 = peg$classExpectation(["\n", "\r"], false, false),
      peg$c123 = function(m) {
              m = u.flat (m).join(""); 
              let num = (m.match(/\n/g) || []).length;
              trace (num + " new line (s)");
              return "\n";},

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    verbose (`${tabs.join("")}[START] Parse "start"`);
    tabs.push("  ")

    var s0;

    s0 = peg$parsefile();

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "start" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsefile() {
    verbose (`${tabs.join("")}[START] Parse "file"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = [];
    s4 = peg$parse_n();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$parse_n();
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseeffects();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseeffects();
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parse_n();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parse_n();
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseclass();
          if (s6 !== peg$FAILED) {
            s7 = [];
            s8 = peg$parse_n();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parse_n();
            }
            if (s7 !== peg$FAILED) {
              s8 = [];
              s9 = peg$parsecpp();
              while (s9 !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parsecpp();
              }
              if (s8 !== peg$FAILED) {
                s9 = [];
                s10 = peg$parse_n();
                while (s10 !== peg$FAILED) {
                  s9.push(s10);
                  s10 = peg$parse_n();
                }
                if (s9 !== peg$FAILED) {
                  s3 = [s3, s4, s5, s6, s7, s8, s9];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$parse_n();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_n();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseeffects();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseeffects();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_n();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_n();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseclass();
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_n();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_n();
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parsecpp();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parsecpp();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parse_n();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parse_n();
                    }
                    if (s9 !== peg$FAILED) {
                      s3 = [s3, s4, s5, s6, s7, s8, s9];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "file"`);
      s1 = peg$c0();
    }
    s0 = s1;

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "file" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseeffects() {
    verbose (`${tabs.join("")}[START] Parse "effects"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseeffect();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseeffect();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsen();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "effects"`);
            s1 = peg$c3(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "effects" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseeffect() {
    verbose (`${tabs.join("")}[START] Parse "effect"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseeffect_name();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c6;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "effect"`);
            s1 = peg$c8(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenon_effect();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "effect"`);
        s1 = peg$c9();
      }
      s0 = s1;
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "effect" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseeffect_name() {
    verbose (`${tabs.join("")}[START] Parse "effect_name"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$c10.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "effect_name"`);
      s1 = peg$c14(s1);
    }
    s0 = s1;

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "effect_name" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsenon_effect() {
    verbose (`${tabs.join("")}[START] Parse "non_effect"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c16.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c16.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c17); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "non_effect"`);
      s1 = peg$c9();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "non_effect" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseclass() {
    verbose (`${tabs.join("")}[START] Parse "class"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseclass_id();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_n();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 123) {
          s3 = peg$c19;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parse_n();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parse_n();
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseclass_content();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parse_n();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parse_n();
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseclass_content();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_n();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_n();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s6 = peg$c21;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_n();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_n();
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s8 = peg$c23;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    verbose (`${tabs.join("")}[OK] Parse "class"`);
                    s1 = peg$c25();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "class" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseclass_id() {
    verbose (`${tabs.join("")}[START] Parse "class_id"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_n();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "class_id"`);
          s1 = peg$c29(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "class_id" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseclass_content() {
    verbose (`${tabs.join("")}[START] Parse "class_content"`);
    tabs.push("  ")

    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseaccess();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "class_content"`);
      s1 = peg$c31(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemember();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "class_content"`);
        s1 = peg$c32(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "class_content" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseaccess() {
    verbose (`${tabs.join("")}[START] Parse "access"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_n();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "access"`);
          s1 = peg$c38(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c39) {
        s1 = peg$c39;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_n();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_n();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s3 = peg$c36;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c37); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "access"`);
            s1 = peg$c38(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c41) {
          s1 = peg$c41;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_n();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_n();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c36;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              verbose (`${tabs.join("")}[OK] Parse "access"`);
              s1 = peg$c38(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c33); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "access" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsemember() {
    verbose (`${tabs.join("")}[START] Parse "member"`);
    tabs.push("  ")

    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemember_decl();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "member"`);
      s1 = peg$c44(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsemember_def();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "member"`);
        s1 = peg$c44(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "member" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsemember_decl() {
    verbose (`${tabs.join("")}[START] Parse "member_decl"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsector();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedeclaration();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "member_decl"`);
        s1 = peg$c46(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedtor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedeclaration();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "member_decl"`);
          s1 = peg$c47(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemethod();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedeclaration();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "member_decl"`);
            s1 = peg$c48(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseop_overload();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedeclaration();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              verbose (`${tabs.join("")}[OK] Parse "member_decl"`);
              s1 = peg$c49(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsevariable();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedeclaration();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                verbose (`${tabs.join("")}[OK] Parse "member_decl"`);
                s1 = peg$c50(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "member_decl" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsemember_def() {
    verbose (`${tabs.join("")}[START] Parse "member_def"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsector();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedefinition();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "member_def"`);
        s1 = peg$c46(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedtor();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedefinition();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "member_def"`);
          s1 = peg$c47(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemethod();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsedefinition();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "member_def"`);
            s1 = peg$c48(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseop_overload();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsedefinition();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              verbose (`${tabs.join("")}[OK] Parse "member_def"`);
              s1 = peg$c49(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsevariable();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsedefinition();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                verbose (`${tabs.join("")}[OK] Parse "member_def"`);
                s1 = peg$c50(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "member_def" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsector() {
    verbose (`${tabs.join("")}[START] Parse "ctor"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseid();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_n();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s3 = peg$c53;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c54); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_n();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_n();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseargs();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_n();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_n();
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c55;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c56); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  verbose (`${tabs.join("")}[OK] Parse "ctor"`);
                  s1 = peg$c57(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "ctor" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsedtor() {
    verbose (`${tabs.join("")}[START] Parse "dtor"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseid();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_n();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_n();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c53;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c54); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_n();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_n();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseargs();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_n();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_n();
                }
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c55;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c56); }
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    verbose (`${tabs.join("")}[OK] Parse "dtor"`);
                    s1 = peg$c61(s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "dtor" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsemethod() {
    verbose (`${tabs.join("")}[START] Parse "method"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedatatype();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_n();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_n();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_n();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c53;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c54); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_n();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_n();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseargs();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_n();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_n();
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c55;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c56); }
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      verbose (`${tabs.join("")}[OK] Parse "method"`);
                      s1 = peg$c63(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "method" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseop_overload() {
    verbose (`${tabs.join("")}[START] Parse "op_overload"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedatatype();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_n();
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c65) {
          s3 = peg$c65;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c66); }
        }
        if (s3 !== peg$FAILED) {
          if (peg$c67.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_n();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_n();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s6 = peg$c53;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_n();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_n();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseargs();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = [];
                    s10 = peg$parse_n();
                    while (s10 !== peg$FAILED) {
                      s9.push(s10);
                      s10 = peg$parse_n();
                    }
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s10 = peg$c55;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c56); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        verbose (`${tabs.join("")}[OK] Parse "op_overload"`);
                        s1 = peg$c69(s1, s4, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "op_overload" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsevariable() {
    verbose (`${tabs.join("")}[START] Parse "variable"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsedatatype();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_n();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseid();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "variable"`);
          s1 = peg$c71(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "variable" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsedeclaration() {
    verbose (`${tabs.join("")}[START] Parse "declaration"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_n();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_n();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "declaration"`);
        s1 = peg$c73();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "declaration" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsedefinition() {
    verbose (`${tabs.join("")}[START] Parse "definition"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_n();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_n();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 59) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "definition"`);
        s1 = peg$c75();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "definition" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseargs() {
    verbose (`${tabs.join("")}[START] Parse "args"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsearg();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseargs2_to_n();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseargs2_to_n();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "args"`);
        s1 = peg$c77(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "args" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseargs2_to_n() {
    verbose (`${tabs.join("")}[START] Parse "args2_to_n"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_n();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_n();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s2 = peg$c79;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_n();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_n();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsearg();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "args2_to_n"`);
            s1 = peg$c81(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "args2_to_n" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsearg() {
    verbose (`${tabs.join("")}[START] Parse "arg"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_n();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_n();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsedatatype();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_n();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_n();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseid();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "arg"`);
            s1 = peg$c83(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "arg" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsedatatype() {
    verbose (`${tabs.join("")}[START] Parse "datatype"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsequalifiers_();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseid();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsepostfix();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsepostfix();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "datatype"`);
          s1 = peg$c85(s1, s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "datatype" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsepostfix() {
    verbose (`${tabs.join("")}[START] Parse "postfix"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_n();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_n();
    }
    if (s1 !== peg$FAILED) {
      if (peg$c87.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsequalifiers();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_n();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_n();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "postfix"`);
            s1 = peg$c89(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "postfix" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsequalifiers_() {
    verbose (`${tabs.join("")}[START] Parse "qualifiers_"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsequalifiers();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_n();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "qualifiers_"`);
        s1 = peg$c91(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "qualifiers_" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsequalifiers() {
    verbose (`${tabs.join("")}[START] Parse "qualifiers"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_n();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c94) {
          s3 = peg$c94;
          peg$currPos += 8;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "qualifiers"`);
          s1 = peg$c96(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c94) {
        s1 = peg$c94;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_n();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_n();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c92) {
            s3 = peg$c92;
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c93); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "qualifiers"`);
            s1 = peg$c96(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c92) {
          s1 = peg$c92;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "qualifiers"`);
          s1 = peg$c97(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c94) {
            s1 = peg$c94;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            verbose (`${tabs.join("")}[OK] Parse "qualifiers"`);
            s1 = peg$c97(s1);
          }
          s0 = s1;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "qualifiers" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsespecial_qualifier() {
    verbose (`${tabs.join("")}[START] Parse "special_qualifier"`);
    tabs.push("  ")

    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_n();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parse_n();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "special_qualifier"`);
        s1 = peg$c101(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c102) {
        s1 = peg$c102;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_n();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_n();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          verbose (`${tabs.join("")}[OK] Parse "special_qualifier"`);
          s1 = peg$c101(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "special_qualifier" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsecpp() {
    verbose (`${tabs.join("")}[START] Parse "cpp"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c105.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c105.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "cpp"`);
      s1 = peg$c107(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "cpp" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parseid() {
    verbose (`${tabs.join("")}[START] Parse "id"`);
    tabs.push("  ")

    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$c109.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c110); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$c111.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        if (peg$c111.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "id"`);
      s1 = peg$c113(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "id" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parse_n() {
    verbose (`${tabs.join("")}[START] Parse "_n"`);
    tabs.push("  ")

    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "_n"`);
      s1 = peg$c115(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsen();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        verbose (`${tabs.join("")}[OK] Parse "_n"`);
        s1 = peg$c115(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "_n" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parse_() {
    verbose (`${tabs.join("")}[START] Parse "_"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c117.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c117.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "_"`);
      s1 = peg$c119(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "_" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  function peg$parsen() {
    verbose (`${tabs.join("")}[START] Parse "n"`);
    tabs.push("  ")

    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c121.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c121.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c122); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      verbose (`${tabs.join("")}[OK] Parse "n"`);
      s1 = peg$c123(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }

    tabs.pop()
    verbose (`${tabs.join("")}[END] Parse "n" s0: ${JSON.stringify (s0)}`);

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
